<Version>1.0.1</Version>

<ProgrammingBlock type="functionCall" function="setMultipleMotors">
    <Parameters>
        <Parameter name="speed" type="short">75</Parameter>
        <Parameter name="firstMotor" type="base typedef" typeDef="tMotor">leftMotor</Parameter>
        <Parameter name="secondMotor" type="base typedef" typeDef="tMotor">rightMotor</Parameter>
        <Parameter name="thirdMotor" type="base typedef" typeDef="tMotor"/>
        <Parameter name="fourthMotor" type="base typedef" typeDef="tMotor"/>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="OneLineLoop" loopType="WaitUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">SensorValue[centerLineFollower]</Parameter>
        <Parameter name="operator" type="typedef">&lt;</Parameter>
        <Parameter name="RHS" type="int">1500</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="stopMultipleMotors">
    <Parameters>
        <Parameter name="firstMotor" type="base typedef" typeDef="tMotor">leftMotor</Parameter>
        <Parameter name="secondMotor" type="base typedef" typeDef="tMotor">rightMotor</Parameter>
        <Parameter name="thirdMotor" type="base typedef" typeDef="tMotor"/>
        <Parameter name="fourthMotor" type="base typedef" typeDef="tMotor"/>
    </Parameters>
</ProgrammingBlock>

<RobotConfiguration>#pragma config(Sensor, in3,    potentiometer,  sensorPotentiometer)
#pragma config(Sensor, in4,    light,          sensorReflection)
#pragma config(Sensor, in6,    accelZ,         sensorAccelerometer)
#pragma config(Sensor, in7,    accelY,         sensorAccelerometer)
#pragma config(Sensor, in8,    accelX,         sensorAccelerometer)
#pragma config(Sensor, dgtl1,  rightEncoder,   sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  leftEncoder,    sensorQuadEncoder)
#pragma config(Sensor, dgtl6,  frontTouch,     sensorTouch)
#pragma config(Sensor, dgtl8,  sonarCM,        sensorSONAR_cm)
#pragma config(Sensor, dgtl11, backTouch,      sensorTouch)
#pragma config(Motor,  port2,           rightMotor,    tmotorServoContinuousRotation, PIDControl, reversed, driveRight, encoderPort, dgtl1)
#pragma config(Motor,  port3,           leftMotor,     tmotorServoContinuousRotation, PIDControl, driveLeft, encoderPort, dgtl3)
#pragma config(Motor,  port6,           armMotor,      tmotorServoContinuousRotation, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
</RobotConfiguration>

<CSource>#pragma config(Sensor, in3,    potentiometer,  sensorPotentiometer)
#pragma config(Sensor, in4,    light,          sensorReflection)
#pragma config(Sensor, in6,    accelZ,         sensorAccelerometer)
#pragma config(Sensor, in7,    accelY,         sensorAccelerometer)
#pragma config(Sensor, in8,    accelX,         sensorAccelerometer)
#pragma config(Sensor, dgtl1,  rightEncoder,   sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  leftEncoder,    sensorQuadEncoder)
#pragma config(Sensor, dgtl6,  frontTouch,     sensorTouch)
#pragma config(Sensor, dgtl8,  sonarCM,        sensorSONAR_cm)
#pragma config(Sensor, dgtl11, backTouch,      sensorTouch)
#pragma config(Motor,  port2,           rightMotor,    tmotorServoContinuousRotation, PIDControl, reversed, driveRight, encoderPort, dgtl1)
#pragma config(Motor,  port3,           leftMotor,     tmotorServoContinuousRotation, PIDControl, driveLeft, encoderPort, dgtl3)
#pragma config(Motor,  port6,           armMotor,      tmotorServoContinuousRotation, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


task main()
{
	setMultipleMotors(75, leftMotor, rightMotor, , );
	waitUntil (SensorValue[centerLineFollower] &lt; 1500);
	stopMultipleMotors(leftMotor, rightMotor, , );
}
</CSource>
