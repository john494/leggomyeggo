<Version>1.0.1</Version>

<RBCVersion>1.0.1</RBCVersion>
<Platform>VEXIQ</Platform>
<MenuLevel>Basic</MenuLevel>
<CompilerMode>VirtualWorlds</CompilerMode>
<CompileAndDownload>Yes</CompileAndDownload>
<VirtualWorldIndex>6</VirtualWorldIndex>
<VEXIQDLMethod>Auto</VEXIQDLMethod>
<NaturalLanguageFlag>True</NaturalLanguageFlag>
<RVWParameters>clampbot beltway sp1 autoloadgame</RVWParameters>

<ProgrammingBlock type="comment">Highrise Beltway</ProgrammingBlock>

<ProgrammingBlock type="comment">Robot: Clampbot | Starting Point: A</ProgrammingBlock>

<ProgrammingBlock type="comment">This program will:</ProgrammingBlock>

<ProgrammingBlock type="comment">1) Back up on to the orange arrow (this will turn the belt CW).</ProgrammingBlock>

<ProgrammingBlock type="comment">2) Turn on the Touch LED to colorDarkOrange so that the belt will stop at dark orange stop pad</ProgrammingBlock>

<ProgrammingBlock type="comment">3) Collect the red blocks from the warehouse.</ProgrammingBlock>

<ProgrammingBlock type="comment">4) Stack the red blocks on the red base.</ProgrammingBlock>

<ProgrammingBlock type="comment">STEP 1) Back up on to the orange arrow.</ProgrammingBlock>

<ProgrammingBlock type="comment">a) Move arm up so that it does not get in the way while riding the belt</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="moveMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">armMotor</Parameter>
        <Parameter name="quantity" type="float">180</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">degrees</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">b) Move backward to automatically hit the orange arrow.  This will activate the belt CW.</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMultipleMotors">
    <Parameters>
        <Parameter name="speed" type="short">-75</Parameter>
        <Parameter name="firstMotor" type="base typedef" typeDef="tMotor">leftMotor</Parameter>
        <Parameter name="secondMotor" type="base typedef" typeDef="tMotor">rightMotor</Parameter>
        <Parameter name="thirdMotor" type="base typedef" typeDef="tMotor"/>
        <Parameter name="fourthMotor" type="base typedef" typeDef="tMotor"/>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="moveMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">clawMotor</Parameter>
        <Parameter name="quantity" type="float">-40</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">degrees</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="wait">
    <Parameters>
        <Parameter name="quantity" type="float">5</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">seconds</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="stopAllMotors"/>

<ProgrammingBlock type="comment">STEP 2) Turn on the Touch LED to colorDarkOrange.</ProgrammingBlock>

<ProgrammingBlock type="comment">a) Set the Touch LED to colorDarkOrange in order to stop at the dark orange pad.</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setTouchLEDColor">
    <Parameters>
        <Parameter name="nDeviceIndex" type="base typedef" typeDef="tSensors">touchLED</Parameter>
        <Parameter name="nColor" type="base typedef" typeDef="TSimpleColors">colorDarkOrange</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">b) Wait until the color sensor reads dark orange.</ProgrammingBlock>

<ProgrammingBlock type="OneLineLoop" loopType="WaitUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">getColorName(colorDetector)</Parameter>
        <Parameter name="operator" type="typedef">==</Parameter>
        <Parameter name="RHS" type="int">colorDarkOrange</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">*Hint (wait until the robot makes a complete stop before leaving the belt).</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="wait">
    <Parameters>
        <Parameter name="quantity" type="float">5</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">seconds</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">STEP 3) Collect the red blocks from the warehouse.</ProgrammingBlock>

<ProgrammingBlock type="comment">a) Move 3 rotations off of the belt</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="forward">
    <Parameters>
        <Parameter name="quantity" type="float">3</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">rotations</Parameter>
        <Parameter name="speed" type="short">75</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">b) Turn right to face the warehouse.</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="turnRight">
    <Parameters>
        <Parameter name="quantity" type="float">1.067</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">rotations</Parameter>
        <Parameter name="speed" type="short">75</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">c) Move forward until the Sonar Sensor reads less than or equal to 80 mm.</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMultipleMotors">
    <Parameters>
        <Parameter name="speed" type="short">75</Parameter>
        <Parameter name="firstMotor" type="base typedef" typeDef="tMotor">leftMotor</Parameter>
        <Parameter name="secondMotor" type="base typedef" typeDef="tMotor">rightMotor</Parameter>
        <Parameter name="thirdMotor" type="base typedef" typeDef="tMotor"/>
        <Parameter name="fourthMotor" type="base typedef" typeDef="tMotor"/>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="OneLineLoop" loopType="WaitUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">getDistanceValue(distanceMM)</Parameter>
        <Parameter name="operator" type="typedef">&lt;=</Parameter>
        <Parameter name="RHS" type="int">80</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="stopAllMotors"/>

<ProgrammingBlock type="comment">d) Grab the red cubes.</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="moveMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">armMotor</Parameter>
        <Parameter name="quantity" type="float">-100</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">degrees</Parameter>
        <Parameter name="speed" type="short">75</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="moveMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">clawMotor</Parameter>
        <Parameter name="quantity" type="float">30</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">degrees</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">STEP 4) Stack the red blocks on to the red base.</ProgrammingBlock>

<ProgrammingBlock type="comment">a) Turn around to face the red base.</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="turnLeft">
    <Parameters>
        <Parameter name="quantity" type="float">2.2</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">rotations</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">b) Move forward until the Sonar Sensor reads less than or equal to 80 mm</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMultipleMotors">
    <Parameters>
        <Parameter name="speed" type="short">75</Parameter>
        <Parameter name="firstMotor" type="base typedef" typeDef="tMotor">leftMotor</Parameter>
        <Parameter name="secondMotor" type="base typedef" typeDef="tMotor">rightMotor</Parameter>
        <Parameter name="thirdMotor" type="base typedef" typeDef="tMotor"/>
        <Parameter name="fourthMotor" type="base typedef" typeDef="tMotor"/>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="moveMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">wristMotor</Parameter>
        <Parameter name="quantity" type="float">1</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">seconds</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="OneLineLoop" loopType="WaitUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">getDistanceValue(distanceMM)</Parameter>
        <Parameter name="operator" type="typedef">&lt;=</Parameter>
        <Parameter name="RHS" type="int">80</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="stopAllMotors"/>

<ProgrammingBlock type="comment">c) Stack both cubes on the red base</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="moveMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">clawMotor</Parameter>
        <Parameter name="quantity" type="float">-10</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">degrees</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">d) Move backward 1 rotation</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="backward">
    <Parameters>
        <Parameter name="quantity" type="float">1</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">rotations</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<RobotConfiguration>#pragma config(Sensor, port2,  touchLED,       sensorVexIQ_LED)
#pragma config(Sensor, port3,  colorDetector,  sensorVexIQ_ColorHue)
#pragma config(Sensor, port4,  gyroSensor,     sensorVexIQ_Gyro)
#pragma config(Sensor, port7,  distanceMM,     sensorVexIQ_Distance)
#pragma config(Sensor, port8,  bumpSwitch,     sensorVexIQ_Touch)
#pragma config(Motor,  motor1,          leftMotor,     tmotorVexIQ, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motor6,          rightMotor,    tmotorVexIQ, PIDControl, reversed, driveRight, encoder)
#pragma config(Motor,  motor10,         armMotor,      tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor11,         clawMotor,     tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor12,         wristMotor,    tmotorVexIQ, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
</RobotConfiguration>

<CSource>#pragma config(Sensor, port2,  touchLED,       sensorVexIQ_LED)
#pragma config(Sensor, port3,  colorDetector,  sensorVexIQ_ColorHue)
#pragma config(Sensor, port4,  gyroSensor,     sensorVexIQ_Gyro)
#pragma config(Sensor, port7,  distanceMM,     sensorVexIQ_Distance)
#pragma config(Sensor, port8,  bumpSwitch,     sensorVexIQ_Touch)
#pragma config(Motor,  motor1,          leftMotor,     tmotorVexIQ, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motor6,          rightMotor,    tmotorVexIQ, PIDControl, reversed, driveRight, encoder)
#pragma config(Motor,  motor10,         armMotor,      tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor11,         clawMotor,     tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor12,         wristMotor,    tmotorVexIQ, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


task main()
{
	// Highrise Beltway
	// Robot: Clampbot | Starting Point: A
	// This program will:
	// 1) Back up on to the orange arrow (this will turn the belt CW).
	// 2) Turn on the Touch LED to colorDarkOrange so that the belt will stop at dark orange stop pad
	// 3) Collect the red blocks from the warehouse.
	// 4) Stack the red blocks on the red base.
	// STEP 1) Back up on to the orange arrow.
	// a) Move arm up so that it does not get in the way while riding the belt
	moveMotor(armMotor, 180, degrees, 50);
	// b) Move backward to automatically hit the orange arrow.  This will activate the belt CW.
	setMultipleMotors(-75, leftMotor, rightMotor, , );
	moveMotor(clawMotor, -40, degrees, 50);
	wait(5, seconds);
	stopAllMotors();
	// STEP 2) Turn on the Touch LED to colorDarkOrange.
	// a) Set the Touch LED to colorDarkOrange in order to stop at the dark orange pad.
	setTouchLEDColor(touchLED, colorDarkOrange);
	// b) Wait until the color sensor reads dark orange.
	waitUntil (getColorName(colorDetector) == colorDarkOrange);
	// *Hint (wait until the robot makes a complete stop before leaving the belt).
	wait(5, seconds);
	// STEP 3) Collect the red blocks from the warehouse.
	// a) Move 3 rotations off of the belt
	forward(3, rotations, 75);
	// b) Turn right to face the warehouse.
	turnRight(1.067, rotations, 75);
	// c) Move forward until the Sonar Sensor reads less than or equal to 80 mm.
	setMultipleMotors(75, leftMotor, rightMotor, , );
	waitUntil (getDistanceValue(distanceMM) &lt;= 80);
	stopAllMotors();
	// d) Grab the red cubes.
	moveMotor(armMotor, -100, degrees, 75);
	moveMotor(clawMotor, 30, degrees, 50);
	// STEP 4) Stack the red blocks on to the red base.
	// a) Turn around to face the red base.
	turnLeft(2.2, rotations, 50);
	// b) Move forward until the Sonar Sensor reads less than or equal to 80 mm
	setMultipleMotors(75, leftMotor, rightMotor, , );
	moveMotor(wristMotor, 1, seconds, 50);
	waitUntil (getDistanceValue(distanceMM) &lt;= 80);
	stopAllMotors();
	// c) Stack both cubes on the red base
	moveMotor(clawMotor, -10, degrees, 50);
	// d) Move backward 1 rotation
	backward(1, rotations, 50);
}
</CSource>
