<Version>1.0.1</Version>

<RBCVersion>1.0.1</RBCVersion>
<Platform>VEXIQ</Platform>
<MenuLevel>Basic</MenuLevel>
<CompilerMode>VirtualWorlds</CompilerMode>
<CompileAndDownload>Yes</CompileAndDownload>
<VirtualWorldIndex>6</VirtualWorldIndex>
<VEXIQDLMethod>Auto</VEXIQDLMethod>
<NaturalLanguageFlag>True</NaturalLanguageFlag>
<RVWParameters>omniplow beltway sp1 autoloadgame</RVWParameters>

<ProgrammingBlock type="comment">Highrise Beltway</ProgrammingBlock>

<ProgrammingBlock type="comment">Robot: Omniplow IQ | Starting Point: A </ProgrammingBlock>

<ProgrammingBlock type="comment">This program will:</ProgrammingBlock>

<ProgrammingBlock type="comment">1) Move in to postion of the first three cubes</ProgrammingBlock>

<ProgrammingBlock type="comment">2) Plow the first three cubes of each columns on to the belt</ProgrammingBlock>

<ProgrammingBlock type="comment">3) Turn the belt on to transport the cubes to the opposite side of the table</ProgrammingBlock>

<ProgrammingBlock type="comment">4) Return to starting base 2</ProgrammingBlock>

<ProgrammingBlock type="comment">STEP 1) Move into position of the first three cubes</ProgrammingBlock>

<ProgrammingBlock type="comment">a) Use the front and back motors to travel left</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="resetMotorEncoder">
    <Parameters>
        <Parameter name="nMotorIndex" type="base typedef" typeDef="tMotor">frontMotor</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">frontMotor</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">rearMotor</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="OneLineLoop" loopType="WaitUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">getMotorEncoder(frontMotor)</Parameter>
        <Parameter name="operator" type="typedef">&gt;=</Parameter>
        <Parameter name="RHS" type="int">720</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">b) Move Back a half rotation so the plow does not hit the blocks</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="backward">
    <Parameters>
        <Parameter name="quantity" type="float">.5</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">rotations</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">c) Wait until the front motor encoder reaches 1480 counts before stopping</ProgrammingBlock>

<ProgrammingBlock type="OneLineLoop" loopType="WaitUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">getMotorEncoder(frontMotor)</Parameter>
        <Parameter name="operator" type="typedef">&gt;=</Parameter>
        <Parameter name="RHS" type="int">1480</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="stopAllMotors"/>

<ProgrammingBlock type="comment">d) Open the plow</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="moveMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">clawMotor</Parameter>
        <Parameter name="quantity" type="float">1</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">seconds</Parameter>
        <Parameter name="speed" type="short">-75</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">STEP 2) Plow the first three cubes of each of the columns on to the belt</ProgrammingBlock>

<ProgrammingBlock type="comment">a) Move forward x Rotations</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="forward">
    <Parameters>
        <Parameter name="quantity" type="float">9</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">rotations</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">b) Back up to be sure the robot is not on the belt</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="backward">
    <Parameters>
        <Parameter name="quantity" type="float">.2</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">rotations</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">STEP 3) Turn the belt on to transport the cubes to the opposite side of the table</ProgrammingBlock>

<ProgrammingBlock type="comment">a) Set the LED to Violet to turn on the belt CW</ProgrammingBlock>

<ProgrammingBlock type="comment">b) Wait 3 seconds until turning the belt off</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setTouchLEDColor">
    <Parameters>
        <Parameter name="nDeviceIndex" type="base typedef" typeDef="tSensors">touchLED</Parameter>
        <Parameter name="nColor" type="base typedef" typeDef="TSimpleColors">colorViolet</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="wait">
    <Parameters>
        <Parameter name="quantity" type="float">3</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">seconds</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setTouchLEDColor">
    <Parameters>
        <Parameter name="nDeviceIndex" type="base typedef" typeDef="tSensors">touchLED</Parameter>
        <Parameter name="nColor" type="base typedef" typeDef="TSimpleColors">colorNone</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">STEP 4) Return to starting base 2</ProgrammingBlock>

<ProgrammingBlock type="comment">a) Use the front and back wheels to return to starting base 2</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="resetMotorEncoder">
    <Parameters>
        <Parameter name="nMotorIndex" type="base typedef" typeDef="tMotor">frontMotor</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">frontMotor</Parameter>
        <Parameter name="speed" type="short">-50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">rearMotor</Parameter>
        <Parameter name="speed" type="short">-50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="OneLineLoop" loopType="WaitUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">getMotorEncoder(frontMotor)</Parameter>
        <Parameter name="operator" type="typedef">&lt;=</Parameter>
        <Parameter name="RHS" type="int">-1500</Parameter>
    </Parameters>
</ProgrammingBlock>

<RobotConfiguration>#pragma config(Sensor, port2,  touchLED,       sensorVexIQ_LED)
#pragma config(Sensor, port3,  colorDetector,  sensorVexIQ_ColorHue)
#pragma config(Sensor, port4,  gyroSensor,     sensorVexIQ_Gyro)
#pragma config(Sensor, port7,  distanceMM,     sensorVexIQ_Distance)
#pragma config(Sensor, port8,  bumpSwitch,     sensorVexIQ_Touch)
#pragma config(Motor,  motor1,          leftMotor,     tmotorVexIQ, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motor5,          frontMotor,    tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor6,          rightMotor,    tmotorVexIQ, PIDControl, reversed, driveRight, encoder)
#pragma config(Motor,  motor9,          rearMotor,     tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor10,         armMotor,      tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor11,         clawMotor,     tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor12,         spinnerMotor,  tmotorVexIQ, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
</RobotConfiguration>

<CSource>#pragma config(Sensor, port2,  touchLED,       sensorVexIQ_LED)
#pragma config(Sensor, port3,  colorDetector,  sensorVexIQ_ColorHue)
#pragma config(Sensor, port4,  gyroSensor,     sensorVexIQ_Gyro)
#pragma config(Sensor, port7,  distanceMM,     sensorVexIQ_Distance)
#pragma config(Sensor, port8,  bumpSwitch,     sensorVexIQ_Touch)
#pragma config(Motor,  motor1,          leftMotor,     tmotorVexIQ, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motor5,          frontMotor,    tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor6,          rightMotor,    tmotorVexIQ, PIDControl, reversed, driveRight, encoder)
#pragma config(Motor,  motor9,          rearMotor,     tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor10,         armMotor,      tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor11,         clawMotor,     tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor12,         spinnerMotor,  tmotorVexIQ, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


task main()
{
	// Highrise Beltway
	// Robot: Omniplow IQ | Starting Point: A 
	// This program will:
	// 1) Move in to postion of the first three cubes
	// 2) Plow the first three cubes of each columns on to the belt
	// 3) Turn the belt on to transport the cubes to the opposite side of the table
	// 4) Return to starting base 2
	// STEP 1) Move into position of the first three cubes
	// a) Use the front and back motors to travel left
	resetMotorEncoder(frontMotor);
	setMotor(frontMotor, 50);
	setMotor(rearMotor, 50);
	waitUntil (getMotorEncoder(frontMotor) &gt;= 720);
	// b) Move Back a half rotation so the plow does not hit the blocks
	backward(.5, rotations, 50);
	// c) Wait until the front motor encoder reaches 1480 counts before stopping
	waitUntil (getMotorEncoder(frontMotor) &gt;= 1480);
	stopAllMotors();
	// d) Open the plow
	moveMotor(clawMotor, 1, seconds, -75);
	// STEP 2) Plow the first three cubes of each of the columns on to the belt
	// a) Move forward x Rotations
	forward(9, rotations, 50);
	// b) Back up to be sure the robot is not on the belt
	backward(.2, rotations, 50);
	// STEP 3) Turn the belt on to transport the cubes to the opposite side of the table
	// a) Set the LED to Violet to turn on the belt CW
	// b) Wait 3 seconds until turning the belt off
	setTouchLEDColor(touchLED, colorViolet);
	wait(3, seconds);
	setTouchLEDColor(touchLED, colorNone);
	// STEP 4) Return to starting base 2
	// a) Use the front and back wheels to return to starting base 2
	resetMotorEncoder(frontMotor);
	setMotor(frontMotor, -50);
	setMotor(rearMotor, -50);
	waitUntil (getMotorEncoder(frontMotor) &lt;= -1500);
}
</CSource>
