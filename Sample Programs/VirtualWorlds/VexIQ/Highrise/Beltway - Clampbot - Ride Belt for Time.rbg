<Version>1.0.1</Version>
<RBCVersion>1.0.1</RBCVersion>
<Platform>VEXIQ</Platform>
<MenuLevel>Basic</MenuLevel>
<CompilerMode>VirtualWorlds</CompilerMode>
<CompileAndDownload>Yes</CompileAndDownload>
<VirtualWorldIndex>6</VirtualWorldIndex>
<VEXIQDLMethod>Auto</VEXIQDLMethod>
<NaturalLanguageFlag>True</NaturalLanguageFlag>
<RVWParameters>clampbot beltway sp1 autoloadgame</RVWParameters>
<ProgrammingBlock type="comment">Highrise Beltway</ProgrammingBlock>

<ProgrammingBlock type="comment">Highrise Beltway</ProgrammingBlock>

<ProgrammingBlock type="comment">Robot: Clampbot IQ | Bottom Starting Point</ProgrammingBlock>

<ProgrammingBlock type="comment">This program will cause the robot to ride the belt Clockwise...</ProgrammingBlock>

<ProgrammingBlock type="comment">...(by driving over one of the beltway arrows) until the amount of time has elapsed on Line 12</ProgrammingBlock>

<ProgrammingBlock type="comment">Raise the arm so that it does not interfere with cubes as the robot moves along the belt</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="moveMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">armMotor</Parameter>
        <Parameter name="quantity" type="float">270</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">degrees</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment" commented="1">Move the Robot backward onto the arrow, causing it to spin on the belt Clockwise</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="backward">
    <Parameters>
        <Parameter name="quantity" type="float">1</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">rotations</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">Set the Touch LED to Violet to enable manual control of the belt Clockwise</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setTouchLEDColor">
    <Parameters>
        <Parameter name="nDeviceIndex" type="base typedef" typeDef="tSensors">touchLED</Parameter>
        <Parameter name="nColor" type="base typedef" typeDef="TSimpleColors">colorViolet</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">Specify how long the robot should ride the belt</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="wait">
    <Parameters>
        <Parameter name="quantity" type="float">10</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">seconds</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">Set the Touch LED to None to Stop the belt</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setTouchLEDColor">
    <Parameters>
        <Parameter name="nDeviceIndex" type="base typedef" typeDef="tSensors">touchLED</Parameter>
        <Parameter name="nColor" type="base typedef" typeDef="TSimpleColors">colorNone</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">Drive off of the specified stop</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="wait">
    <Parameters>
        <Parameter name="quantity" type="float">1</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">seconds</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="forward">
    <Parameters>
        <Parameter name="quantity" type="float">1</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">rotations</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<RobotConfiguration>#pragma config(Sensor, port2,  touchLED,       sensorVexIQ_LED)
#pragma config(Sensor, port3,  colorDetector,  sensorVexIQ_ColorHue)
#pragma config(Sensor, port4,  gyroSensor,     sensorVexIQ_Gyro)
#pragma config(Sensor, port7,  distanceMM,     sensorVexIQ_Distance)
#pragma config(Sensor, port8,  bumpSwitch,     sensorVexIQ_Touch)
#pragma config(Motor,  motor1,          leftMotor,     tmotorVexIQ, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motor6,          rightMotor,    tmotorVexIQ, PIDControl, reversed, driveRight, encoder)
#pragma config(Motor,  motor10,         armMotor,      tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor11,         clawMotor,     tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor12,         wristMotor,    tmotorVexIQ, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
</RobotConfiguration>

<CSource>#pragma config(Sensor, port2,  touchLED,       sensorVexIQ_LED)
#pragma config(Sensor, port3,  colorDetector,  sensorVexIQ_ColorHue)
#pragma config(Sensor, port4,  gyroSensor,     sensorVexIQ_Gyro)
#pragma config(Sensor, port7,  distanceMM,     sensorVexIQ_Distance)
#pragma config(Sensor, port8,  bumpSwitch,     sensorVexIQ_Touch)
#pragma config(Motor,  motor1,          leftMotor,     tmotorVexIQ, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motor6,          rightMotor,    tmotorVexIQ, PIDControl, reversed, driveRight, encoder)
#pragma config(Motor,  motor10,         armMotor,      tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor11,         clawMotor,     tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor12,         wristMotor,    tmotorVexIQ, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


task main()
{
	// Highrise Beltway
	// Robot: Clampbot IQ | Bottom Starting Point
	// This program will cause the robot to ride the belt Clockwise...
	// ...(by driving over one of the beltway arrows) until the amount of time has elapsed on Line 12
	// Raise the arm so that it does not interfere with cubes as the robot moves along the belt
	moveMotor(armMotor, 270, degrees, 50);
	//// Move the Robot backward onto the arrow, causing it to spin on the belt Clockwise
	backward(1, rotations, 50);
	// Set the Touch LED to Violet to enable manual control of the belt Clockwise
	setTouchLEDColor(touchLED, colorViolet);
	// Specify how long the robot should ride the belt
	wait(10, seconds);
	// Set the Touch LED to None to Stop the belt
	setTouchLEDColor(touchLED, colorNone);
	// Drive off of the specified stop
	wait(1, seconds);
	forward(1, rotations, 50);
}
</CSource>
